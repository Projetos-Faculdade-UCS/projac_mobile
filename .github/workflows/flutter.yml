name: Android Release

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    environment: Production
    strategy:
      matrix:
        build-type: ["apk", "appbundle"]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"
          cache: 'gradle'


      - uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.22.2"
          channel: "stable"
          cache: true
          cache-key: "flutter-:os:-:channel:-:version:-:arch:-:hash:"
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"
          pub-cache-key: "flutter-pub:os:-:channel:-:version:-:arch:-:hash:"
          pub-cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"

      - name: Get dependencies
        run: flutter pub get

      - name: Decode and Prepare Environment
        run: |
          echo "${{ secrets.KEYSTORE_B64 }}" | base64 -d > upload-keystore.jks
          echo "${{ secrets.KEY_PROPERTIES }}" | base64 -d > android/key.properties
          echo "${{ secrets.DOTENV_B64 }}" | base64 -d > .env

      - name: Run Build Runner
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Build and Obfuscate
        run: |
          flutter build ${{ matrix.build-type }} --release --split-debug-info=build/app/outputs/flutter-apk/split-debug-info --obfuscate
          SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }} dart run sentry_dart_plugin

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build-type == 'apk' && 'app-release-apk' || 'app-release-aab' }}
          path: ${{ matrix.build-type == 'apk' && 'build/app/outputs/flutter-apk/app-release.apk' || 'build/app/outputs/bundle/release/app-release.aab' }}

  upload-artifacts:
    name: Upload Artifacts
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download all Artifacts
        uses: actions/download-artifact@v4
        with:
          path: app-release
          pattern: app-release-*
          merge-multiple: true

      - name: Upload artifacts as one
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: app-release

  create-tag:
    name: Create Tag and Release
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from pubspec.yaml
        id: get_version
        run: |
          version=$(grep 'version:' pubspec.yaml | sed 's/version: //')
          echo "::set-output name=VERSION::$version"

      - name: Create new tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag v${{ steps.get_version.outputs.VERSION }}
          git push origin v${{ steps.get_version.outputs.VERSION }}

      - name: Download all Artifacts
        uses: actions/download-artifact@v4
        with:
          path: app-release
          pattern: app-release-*
          merge-multiple: true

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          release_name: Release v${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false

      - name: Upload APK and AAB to Release
        run: |
          gh release upload v${{ steps.get_version.outputs.VERSION }} app-release/app-release.apk
          gh release upload v${{ steps.get_version.outputs.VERSION }} app-release/app-release.aab
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
